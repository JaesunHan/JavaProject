import java.awt.*;
import javax.swing.*;

class TimerThreadDeSec extends Thread 
{
   JLabel timerLabel;
  public int n=0;

   public TimerThreadDeSec(JLabel timerLabel)
   {
      this.timerLabel = timerLabel;
   }
   
   public void run()
   {
      while(n<10) 
      {
         timerLabel.setText(Integer.toString(n)); // 레이블에 카운트 값 출력   
         
			try{
				Thread.sleep(100); // 0.1초동안 잠을 잔다.
			}
			catch(InterruptedException e){
				return; // 예외가 발생하면 스레드 종료
			}
			if(n==9)n=0;
         n++;
      }
   }
}

class TimerThreadSec extends Thread{
	JLabel timerLabel;	
	public int m=0;
		public TimerThreadSec(JLabel timerLabel){
		this.timerLabel = timerLabel;
	}
   
	public void run(){
		while(m<60){
			
			timerLabel.setText(Integer.toString(m));
			try{
				Thread.sleep(1000);
			} catch(InterruptedException e){
				return;
			}
			if(m==59) m=0;
			m++;
		}
	}
}

class TimerThreadMin extends Thread {
	JLabel timerLabel;
	public int p=0;

	public TimerThreadMin(JLabel timerLabel){
		this.timerLabel = timerLabel;
	}
   
	public void run()
	{  
		while(p<60){
			p++;
			timerLabel.setText(Integer.toString(p)); // 레이블에 카운트 값 출력  
			try{
				Thread.sleep(60000);
			}catch(InterruptedException e){
				return;
			}
			if(p==59)p=0;
		}
	}
}

public class ThreadTimer extends JFrame
{

	public ThreadTimer()
	{

		setTitle("Thread를 상속받은 타이머 스레드 예제");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new FlowLayout());

		JLabel colon1 = new JLabel();
		JLabel colon2 = new JLabel();

		JLabel timerLabel1 = new JLabel();
		JLabel timerLabel2 = new JLabel();
		JLabel timerLabel3 = new JLabel();

		colon1.setFont(new Font("Gothic", Font.ITALIC, 80));
		colon1.setText(":");
		colon2.setFont(new Font("Gothic", Font.ITALIC, 80));
		colon2.setText(":");

		timerLabel1.setFont(new Font("Gothic", Font.ITALIC, 80));
		timerLabel2.setFont(new Font("Gothic", Font.ITALIC, 80));
		timerLabel3.setFont(new Font("Gothic", Font.ITALIC, 80));

		c.add(timerLabel1);
		c.add(colon1);
		c.add(timerLabel2);
		c.add(colon2);
		c.add(timerLabel3); 
   
		TimerThreadMin minT = new TimerThreadMin(timerLabel1);
		TimerThreadSec secT = new TimerThreadSec(timerLabel2);
		TimerThreadDeSec dsecT = new TimerThreadDeSec(timerLabel3);

		setSize(250,150);
		setVisible(true);
 
		minT.start();
		
		secT.start();
		
		dsecT.start();

	  
		if(secT.isInterrupted() == true){
			dsecT.interrupt();
			
		}
		
		if(minT.isInterrupted() == true){
			secT.interrupt();
		}
	
	}
   
	public static void main(String[] args)
	{
		new ThreadTimer();
	}
}
